<?php

/**
 * This file contains the code that powers the AdminStats page of xTools.
 *
 * @version 1.5.1
 */

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class AdminStatsController
 *
 * @category AdminStats
 * @package  AppBundle\Controller
 * @author   Xtools Team <xtools@lists.wikimedia.org>
 * @license  GPL 3.0
 * @link     http://tools.wmflabs.org/xtools/adminstats
 */
class AdminStatsController extends Controller
{

    /**
     * Method for rendering the AdminStats Main Form.
     * This method redirects if valid parameters are found, making it a
     * valid form endpoint as well.
     *
     * @param \Symfony\Component\HttpFoundation\Request $request Generated by Symfony
     *
     * @Route("/adminstats",           name="adminstats")
     * @Route("/adminstats/",          name="AdminStatsSlash")
     * @Route("/adminstats/index.php", name="AdminStatsSlash")
     *
     * @return Route|\Symfony\Component\HttpFoundation\Response
     */
    public function indexAction(Request $request)
    {
        // Load up the labs helper and check if the tool is enabled.
        $lh = $this->get("app.labs_helper");
        $lh->checkEnabled("adminstats");

        // Pull the values out of the query string.  These values default to
        // empty strings.
        $projectQuery = $request->query->get('project');
        $startDate = $request->query->get('begin');
        $endDate = $request->query->get("end");

        // Redirect if the values are set.
        if ($projectQuery != "" && $startDate != "" && $endDate != "") {
            // Redirect ot the route fully
            return $this->redirectToRoute(
                "AdminStatsResult",
                [
                    'project'=>$projectQuery,
                    'start' => $startDate,
                    'end' => $endDate,
                ]
            );
        } elseif ($projectQuery != "" && $endDate != "") {
            // Redirect if we have the enddate and project
            return $this->redirectToRoute(
                "AdminStatsResult",
                [
                    'project'=>$projectQuery,
                    'end' => $endDate,
                ]
            );
        } elseif ($projectQuery != "" && $startDate != "") {
            // Redirect if we have the stardate and project
            return $this->redirectToRoute(
                "AdminStatsResult",
                [
                    'project' => $projectQuery,
                    'start' => $startDate,
                ]
            );
        } elseif ($projectQuery != "") {
            // Redirect if we have the project name
            return $this->redirectToRoute(
                "AdminStatsResult",
                [
                    'project'=>$projectQuery
                ]
            );
        }

        // Otherwise fall through.
        return $this->render(
            'adminStats/index.html.twig',
            [
                'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..'),
                'xtPage' => 'adminstats',
                'xtPageTitle' => 'tool-adminstats',
                'xtSubtitle' => 'tool-adminstats-desc',
            ]
        );
    }

    /**
     * Method for rendering the AdminStats Results
     *
     * @param string $project Project to run the results against
     * @param string $start   Date to start on.  Must parse by strtotime.
     * @param string $end     Date to end on.  Must parse by strtotime.
     *
     * @Route("/adminstats/{project}/{start}/{end}", name="AdminStatsResult")
     *
     * @return Route|\Symfony\Component\HttpFoundation\Response
     */
    public function resultAction($project, $start = null, $end = null)
    {
        if ($start == null) {
            $start = date("Y-m-d", strtotime("-1 month"));
        }

        if ($end == null) {
            $end = date("Y-m-d");
        }
        // Start by validating the dates.  If the dates are invalid, we'll redirect
        // to the project only view.
        if (strtotime($start) === false || strtotime($end) === false) {
            // Make sure to add the flash notice first.
            $this->addFlash("notice", ["invalid_date"]);

            // Then redirect us!
            return $this->redirectToRoute(
                "AdminStatsResult",
                [
                    "project" => $project
                ]
            );
        }

        // Initialize variables - prevents variable undefined errors
        $adminIdArr = [];
        $adminsWithoutAction = 0;
        $adminsWithoutActionPct = 0;

        // Pull the labs helper, API helper, and database.  Then check if we can
        // use this tool
        $lh = $this->get("app.labs_helper");
        $api = $this->get("app.api_helper");
        $conn = $this->get('doctrine')->getManager("replicas")->getConnection();

        $lh->checkEnabled("adminstats");

        // Load the database information for the tool
        $dbValues = $lh->databasePrepare($project, "AdminStats");

        $dbName = $dbValues["dbName"];
        $wikiName = $dbValues["wikiName"];
        $url = $dbValues["url"];

        // Generate a diff for the dates - this is the number of days we're spanning.
        $days = date_diff(new \DateTime($end), new \DateTime($start))->days;

        // Get admin ID's, used to account for inactive admins
        $user_groups_table = $lh->getTable("user_groups", $dbName);
        $ufg_table = $lh->getTable("user_former_groups");
        $query = "
            SELECT ug_user AS user_id
            FROM $user_groups_table
            WHERE ug_group = 'sysop'
            UNION
            SELECT ufg_user AS user_id
            FROM $ufg_table
            WHERE ufg_group = 'sysop'
            ";

        $res = $conn->prepare($query);
        $res->execute();

        // Iterate over query results, loading each user id into the array
        while ($row = $res->fetch()) {
            $adminIdArr[] = $row["user_id"] ;
        }

        // Set the query results to be useful in a sql statement.
        $adminIds = implode(',', $adminIdArr);

        // Load up the tables we need and run the mega query.
        // This query provides all of the statistics
        $userTable = $lh->getTable("user", $dbName);
        $loggingTable = $lh->getTable("logging", $dbName, "userindex");

        $startDb = date('Ymd000000', strtotime($start));
        $endDb = date('Ymd000000', strtotime($end));

        // TODO: Fix this - inactive admins aren't getting shown
        $query = "
            SELECT user_name, user_id,
                SUM(IF( (log_type='delete'  AND log_action != 'restore'),1,0)) AS mdelete,
                SUM(IF( (log_type='delete'  AND log_action  = 'restore'),1,0)) AS mrestore,
                SUM(IF( (log_type='block'   AND log_action != 'unblock'),1,0)) AS mblock,
                SUM(IF( (log_type='block'   AND log_action  = 'unblock'),1,0)) AS munblock,
                SUM(IF( (log_type='protect' AND log_action !='unprotect'),1,0)) AS mprotect,
                SUM(IF( (log_type='protect' AND log_action  ='unprotect'),1,0)) AS munprotect,
                SUM(IF( log_type='rights',1,0)) AS mrights,
                SUM(IF( log_type='import',1,0)) AS mimport,
                SUM(IF(log_type !='',1,0)) AS mtotal
            FROM $loggingTable
            JOIN $userTable ON user_id = log_user
            WHERE  log_timestamp > '$startDb' AND log_timestamp <= '$endDb'
              AND log_type IS NOT NULL
              AND log_action IS NOT NULL
              AND log_type IN ('block', 'delete', 'protect', 'import', 'rights')
            GROUP BY user_name
            HAVING mdelete > 0 OR user_id IN ($adminIds)
            ORDER BY mtotal DESC";

        $res = $conn->prepare($query);
        $res->execute();

        // Fetch all the information out.  Because of pre-processing done
        // in the query, we can use this practically raw.
        $users = $res->fetchAll();

        // Pull the admins from the API, for merging.
        $admins = $api->getAdmins($project);

        // Get the total number of admins, the number of admins without
        // action, and then later we'll run percentage calculations
        $adminCount = count($admins);

        // Combine the two arrays.  We can't use array_merge here because
        // the arrays contain fundamentally different data.  Instead, it's
        // done by hand.  Only two values are needed, edit count and groups.
        foreach ($users as $key => $value) {
            $username = $value["user_name"];

            if (empty($admins[$username])) {
                $admins[$username] = [
                    'groups' => '',
                ];
            }
            $users[$key]["groups"] = $admins[$username]["groups"];

            if ($users[$key]["mtotal"] === 0) {
                $adminsWithoutAction++;
            }

            unset($admins[$username]);
        }

        // push any inactive admins back to $users with zero values
        if (count($admins)) {
            foreach ($admins as $username => $stats) {
                $users[] = [
                    'user_name' => $username,
                    'mdelete' => 0,
                    'mrestore' => 0,
                    'mblock' => 0,
                    'munblock' => 0,
                    'mprotect' => 0,
                    'munprotect' => 0,
                    'mrights' => 0,
                    'mimport' => 0,
                    'mtotal' => 0,
                    'groups' => $stats['groups'],
                ];
                $adminsWithoutAction++;
            }
        }

        if ($adminCount > 0) {
            $adminsWithoutActionPct = ($adminsWithoutAction / $adminCount) * 100;
        }

        // Render the result!
        return $this->render(
            "adminStats/result.html.twig",
            [
                'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..'),
                'xtPage' => 'adminstats',
                'xtTitle' => $project,

                'project_url' => $url,
                'project' => $project,
                'wikiName' => $wikiName,

                'start_date' => $start,
                'end_date' => $end,
                'days' => $days,

                'adminsWithoutAction' => $adminsWithoutAction,
                'admins_without_action_pct' => $adminsWithoutActionPct,
                'adminCount' => $adminCount,

                'users' => $users,
                'usersCount' => count($users),
            ]
        );
    }
}
